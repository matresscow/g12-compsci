/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package project2;

import java.util.ArrayList;
import java.util.List;

public class MergeSort extends Sort {

    public static ArrayList sort(ArrayList<String> list) {
        System.err.println("working . . .");
        long time = -System.currentTimeMillis();
        list = theSort(list);
        time += System.currentTimeMillis();
        
        for (String string : list) {
            System.err.println(string);
        }
        System.err.println("The sort took " + (time) + " milliseconds to complete.");
        System.err.flush();
        if (!isSorted(list)) {
            throw new ArithmeticException();
        }
        return list;
    }

    public static ArrayList<String> theSort(List<String> list) {
        if (list.size() < 2) {
            ArrayList<String> rep = new ArrayList<>();
            rep.addAll(list);
            return rep;
        }
        List<String> list1 = list.subList(0, list.size() / 2);
        List<String> list2 = list.subList(list.size() / 2, list.size());
        list1 = theSort(list1);
        list2 = theSort(list2);
        ArrayList<String> result = new ArrayList<>();
        int min = Math.min(list1.size(), list2.size());
        int i1 = 0, i2 = 0;
        while (i1 < list1.size() && i2 < list2.size()) {
            if (list1.get(i1).compareTo(list2.get(i2)) < 0) {
                result.add(list1.get(i1++));
            } else {
                result.add(list2.get(i2++));
            }
        }
        if (i1 == list1.size()) {
            for (;i2 < list2.size(); i2++) {
                result.add(list2.get(i2));
            }
        } else if (i2 == list2.size()) {
            for (;i1 < list1.size(); i1++) {
                result.add(list1.get(i1));
            }
        }
        return result;
    }
}
